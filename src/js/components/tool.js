// Generated by CoffeeScript 1.9.3
(function() {
  $.fn.extend({
    toggleText: function(str1, str2) {
      var $self;
      $self = $(this);
      return $self.text($self.text() === str1 ? str2 : str1);
    },
    getDomPosition: function() {
      var $self, offset;
      $self = $(this);
      offset = $self.offset();
      return [offset.left, offset.top, $self.outerWidth(), $self.outerHeight()];
    },
    isNull: function(text, oValue) {
      var $self, val;
      $self = $(this);
      val = $self[0].nodeName === 'DIV' ? $self.html() : $self.val();
      if ($trim(val) === '' || val === oValue) {
        $.toast(text + '不能为空！');
        true;
      }
      return false;
    },
    resetForm: function() {
      var $self;
      $self = this;
      $self.find('input,textarea').removeClass('error');
      return $self.find('.errorTip').remove();
    },
    validate: function() {
      var $self;
      $self = this;
      $self.find('.required').isBlank();
      $self.find('input,textarea').formatCheck();
      $self.find('input,textarea').contentCheck();
      if ($self.find('.errorTip').length > 0) {
        $self.find('.errorTip').parent().find('input, textarea').eq(0);
        return false;
      } else {
        return true;
      }
    },
    inputCheck: function() {
      var $inputList, $self;
      $self = this;
      $inputList = $self.find('input, textarea');
      $inputList.on('input', function() {
        return $(this).removeClass('error').parent().find('.errorTip').remove();
      });
      return $inputList.on('blur', function() {
        $(this).isBlank();
        $(this).formatCheck();
        return $(this).contentCheck();
      });
    },
    isBlank: function() {
      var $inputList;
      $inputList = this;
      $inputList.parent().find(".errorNull").remove();
      return $inputList.each(function() {
        var title;
        if ($.trim($(this).val()) === '') {
          if ($(this).parent().find('.errorTip').length === 0) {
            title = $(this).parent().siblings('.fTitle').text().replace('*', '');
            return $(this).addClass('error').parent().append("<div class='errorTip errorNull'><i></i><span>" + title + "不能为空</span></div>");
          }
        }
      });
    },
    contentCheck: function() {
      var $inputList;
      $inputList = this;
      return $inputList.filter('.minMax').each(function() {
        var title;
        title = $(this).parent().siblings('.fTitle').text().replace('*', '');
        if ($(this).attr('min') && parseInt($(this).attr('min')) > $(this).val() && ($(this).parent().find('.errorTip').length === 0)) {
          return $(this).addClass('error').parent().append("<div class='errorTip errorText'><i></i><span>" + title + "不能小于" + ($(this).attr('min')) + "</span></div>");
        } else if ($(this).attr('max') && $(this).val() >= parseInt($(this).attr('max')) && ($(this).parent().find('.errorTip').length === 0)) {
          return $(this).addClass('error').parent().append("<div class='errorTip errorText'><i></i><span>" + title + "不能大于" + ($(this).attr('min')) + "</span></div>");
        }
      });
    },
    formatCheck: function() {
      var $inputList, checkFormName, inputValue, regExpValue;
      $inputList = $(this);
      inputValue = '';
      checkFormName = ['formPhone', 'formQQ', 'formEmail', 'formIdCard', 'formBankCard', 'formAmount'];
      regExpValue = [/^(13[\d]{9}|15[\d]{9}|17[\d]{9}|14[\d]{9}|18[\d]{9})$/, /^[1-9]\d{4,10}$/, /^([\w-]+(?:\.[\w-]+)*)@((?:[\w-]+\.)*\w[\w-]{0,66})\.([a-z]{2,6}(?:\.[a-z]{2})?)$/, /(^\d{15}$)|(^\d{18}$)|(^\d{17}(\d|X|x)$)/, /^\d{16}|\d{19}$/, /^((0\.0[1-9])|(0\.[1-9]0{0,})|([1-9]\d{0,}\.\d{1,2})|([1-9]\d*))$/];
      return $inputList.each(function() {
        var $iCon, $this, i, j, otherCheck, ref, title;
        $this = $(this);
        inputValue = $this.val();
        $iCon = $this.parent();
        title = $iCon.siblings('.fTitle').text().replace(/\（.*?\）/g, '').replace(/：/g, '');
        otherCheck = function(RegExp, i) {
          if (!RegExp.test(inputValue)) {
            if (!($this.val() === '')) {
              $this.addClass('error');
              if ($iCon.find('.errorTip').length === 0) {
                return $iCon.append("<div class='errorTip errorInput'><i></i><span>" + title + (i === 5 ? '数值' : '格式') + "不正确</span></div>");
              }
            }
          }
        };
        for (i = j = 0, ref = checkFormName.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
          if ($this.hasClass(checkFormName[i])) {
            otherCheck(regExpValue[i], i);
            return false;
          }
        }
      });
    },
    goBack: function() {
      var $this;
      $this = $(this);
      return $this.on('click', function() {
        if (history.length > 1) {
          return window.history.go(-1);
        } else {
          window.opener = null;
          return window.close();
        }
      });
    },
    placeholder: function() {
      var $self;
      $self = $(this);
      if (!('placeholder' in document.createElement('input'))) {
        $self.find(':input[placeholder]').each(function(index, element) {
          var $this, h, holder, pos;
          $this = $(this);
          $this.wrap($('<div></div>').css({
            position: 'relative',
            zoom: '1',
            border: 'none',
            background: 'none',
            padding: 'none',
            margin: 'none',
            float: $this.css('float'),
            display: $this.css('display')
          }));
          pos = $this.position();
          h = $this.outerHeight(true);
          holder = $('<span></span>').text($this.attr('placeholder')).css({
            position: 'absolute',
            left: 0,
            top: 0,
            height: $this.height(),
            width: $this.width(),
            lineHeight: $this.height() + 'px',
            paddingLeft: $this.css('padding-left'),
            textIndent: $this.css('text-indent'),
            paddingTop: $this.css('padding-top'),
            marginLeft: $this.css('margin-left'),
            fontSize: $this.css('fontSize'),
            color: '#aaa'
          }).appendTo($this.parent());
          if (($(this)).val()) {
            holder.hide();
          }
          $this.on('change', function() {
            if (($(this)).val()) {
              return holder.hide();
            }
          });
          $this.focusin(function(e) {
            return holder.hide();
          }).focusout(function(e) {
            if (!$this.val()) {
              return holder.show();
            }
          });
          return holder.click(function() {
            holder.hide();
            return $this.focus();
          });
        });
      }
      return $self;
    }
  });
  return $.extend({
    addCard: function() {
      $('#phoneCodeBtn').sendCaptcha();
      $('.addCard').on('click', function() {
        $('.addCardCon').addClass('active');
        return $('.oldBtnBox').hide();
      });
      $('.addCardCon .cancelCardBtn').on('click', function() {
        $('.addCardCon').removeClass('active');
        return $('.oldBtnBox').show();
      });
      $('.addCardCon .addCardBtn').on('click', function() {
        if (!$('.addCardCon').validate()) {
          return;
        }
        if ($(".addCardCon .cardList").find(".active").size() > 0) {
          return $.ajax('/fortune/wallet/bindCard', {
            type: 'post',
            data: {
              bankId: $(".addCardCon .cardList").find(".active").attr('data'),
              cardType: $(".addCardCon .radioBox").find(".active").attr('data'),
              cardNumber: $('#cardNumber').val(),
              ownerName: $('#ownerName').val(),
              phoneNum: $('#phoneNum').val()
            },
            dataType: 'json',
            success: function(result) {
              var cardNumLen, cardNumber, data;
              if (result.code === '0') {
                data = result.data;
                cardNumLen = data.cardNumber.length;
                cardNumber = '**** **** **** ' + (cardNumLen === 19 ? '***' : '') + data.cardNumber.slice(cardNumLen - 4);
                $('.addCardCon').removeClass('active');
                $('.oldBtnBox').show();
                $('.addCard').hide();
                $('.form .card').removeClass('active');
                return $('.bankCardList .addCard').before("<div class='card active' dataId='" + data.id + "'><i style='background-image:url(" + data.bankIconUrl + ")'></i><div class='cName'>" + data.bankName + "</div><div class='cSort'>" + (data.cardType === 1 ? '储蓄卡' : '信用卡') + "</div><div class='cNum'>" + cardNumber + "</div></div>");
              } else {
                return $.toast(result.msg);
              }
            }
          });
        } else {
          return $.toast('请选择开户银行');
        }
      });
      return $('.addCardCon .cardList').on('click', 'li', function() {
        $('.addCardCon .cardList li.active').removeClass('active');
        return ($(this)).addClass('active');
      });
    },
    stringToObj: function(str) {
      return eval("(" + str + ")");
    },
    objToString: function(obj) {
      return JSON.stringify(obj).replace(/"/g, '"');
    },
    testComplicate: function(str) {
      var ls;
      ls = 0;
      if (str.length < 8 || str.length > 12) {
        ls = -1;
      } else {
        if (str.match(/[a-z]+/)) {
          ls++;
        }
        if (str.match(/[0-9]+/)) {
          ls++;
        }
        if (str.match(/[A-Z]+/)) {
          ls++;
        }
        if (str.match(/[^0-9a-zA-Z]+/)) {
          ls++;
        }
      }
      if (ls < 0) {
        return -1;
      } else if (ls < 2) {
        return 1;
      } else if (ls < 3) {
        return 2;
      } else {
        return 3;
      }
    },
    cookie: function(name, value, options) {
      var cookie, cookieValue, cookies, date, domain, expires, i, j, path, ref, secure;
      if (typeof value !== 'undefined') {
        options = options || {};
        if (value === null) {
          value = '';
          options.expires = -1;
        }
        expires = '';
        if (options.expires && ((typeof options.expires === 'number') || options.expires.toUTCString)) {
          date = null;
          if (typeof options.expires === 'number') {
            date = new Date();
            date.setTime(date.getTime() + (options.expires * 24 * 60 * 60 * 1000));
          } else {
            date = options.expires;
          }
          expires = '; expires=' + date.toUTCString();
        }
        path = options.path ? '; path=' + options.path : '';
        domain = options.domain ? '; domain=' + options.domain : '';
        secure = options.secure ? '; secure' : '';
        return document.cookie = [name, '=', encodeURIComponent(value), expires, path, domain, secure].join('');
      } else {
        cookieValue = null;
        if (document.cookie && document.cookie !== '') {
          cookies = document.cookie.split(';');
          for (i = j = 0, ref = cookies.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
            cookie = jQuery.trim(cookies[i]);
            if (cookie.substring(0, name.length + 1) === (name + '=')) {
              cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
              break;
            }
          }
        }
        return cookieValue;
      }
    },
    getUrlParam: function(name) {
      var r, reg;
      reg = new RegExp("(^|&)" + name + "=([^&]*)(&|$)", "i");
      r = encodeURI(window.location.search).substr(1).match(reg);
      if (r !== null) {
        return unescape(r[2]);
      }
      return null;
    }
  });
})();
